Language Description #1

C++ Version: C++ 17

C++ Programming paradigms: C++ incorporates a mix of programming paradigms. It is considered to be a multi-paradigm language.
    C++ supports imperative, procedural and object-oriented approaches. It also uses generic and functional programming concepts. 


C++ is a compiled language, it uses the GCC compiler which is not only the most common 
    but is also open source and supports Windows and Unix Operating systems.


C++ is statically typed, meaning that once the type of a variable is set, it cannot be changed (this is checked at compile time). 
    While it is true that variables can be cast to other types, the actual variable is not converted to the new type, but it is rather 
    read in such a way as if it was the new type. 

    C++ supports both static and dynamic binding, dynamic bound variables are determined during runtime, while static ones are set at compile time.


While there is speculation about the exact definition of C++ typing, C++ is a strongly typed language. 
    This is from the definition of C++ from Bjarne Stroustrup himself, the creator of C++. 


While there are tools for garbage collection in C++, native C++ does not include them thus it has no garbage collection. The programmer
    must manage all dynamically allocated memory themselves, if they choose to use any with new() and delete(). 


C++ has support for first-class functions as well as closures. First-class functions should be used with care because of the lack of a garbage collector which may result in some memory leaks. 


As with C, it is only natural that C++ has support for concurrent programming. There are built-in tools and functions that 
    make parallel programming easier on the coder, but it is still not as easy as in languages like Javascript or Haskell, and more complex 
    parallelism will have to be implemented by hand using Mutexes, Threads, race conditions, etc.



Language Description #2


Python Version 3.9.0 

Like C++ python supports multipule programming paradigms including imperative, structured, object-oriented, and functional programming.


Python is not a dedicated compiled language unlike C++, it is interpreted at run time without pre-compiling instructions prior to running
    The interpreter that is used is the Python interpreter which is the most common. While Python is mainly interpreted, it can also be compiled 
    to bytecode


Python is dynamically typed since it is interpreted. Objects in python recieve a type at runtime unlike C++ where types are declared 
    explicitely. Python is dynamically bound since all variables are bound directly to an object.


Python is strongly typed, once a variable is set, the type of that variable will not change unless it is re-initialized.
    For example, x = 5; x = "String" will not change the type of the variable x, but rather create a new variable x which is 
    now of the String type and delete the old x variable. 


Python has an embedded garbage collector which means that there is no need for manual memory management, and unlike C++ 
    it is not possible to do manual memory management. 


Python functions are first-class objects, which means they're assignable to variables, can be used as function arguments, etc.
    Python also has support for closures which come in the form of nested fucntions which have access to free variables in the 
    outer level scope. 


Python has concurrency support but it is not as extensive as in C++. Python has a built in GIL (Global interpreter lock) which 
    acts like a mutex in C/C++ preventing multiple threads from accessing it at the same time. 
